<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/batch
       http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
       http://www.springframework.org/schema/task 
       http://www.springframework.org/schema/task/spring-task-3.0.xsd">

    <!--任务业务流程 -->
    <batch:job id="importIpsnListJob" job-repository="jobRepository"
               incrementer="runIdIncrementer" restartable="true">
        <batch:step id="excelToCsv" next="ipsnListReadWrite">
            <batch:tasklet ref="excelToCsvTasklet">
            	<batch:transaction-attributes propagation="NOT_SUPPORTED" />
            </batch:tasklet>
        </batch:step>
        <batch:step id="ipsnListReadWrite" next="errorGrpInsuredPrint">
            <batch:tasklet>
                <batch:chunk reader="ipsnItemReader" processor="ipsnItemProcessor"
                             writer="ipsnMultiItemWriter" commit-interval="1000"/>
            </batch:tasklet>
        </batch:step>
        <batch:step id="errorGrpInsuredPrint">
            <batch:tasklet ref="errorGrpInsuredPrintTasket"/>
        </batch:step>
        <batch:listeners>
            <batch:listener ref="ipsnListImportListener"/>
        </batch:listeners>
    </batch:job>

    <bean id="runIdIncrementer"
          class="org.springframework.batch.core.launch.support.RunIdIncrementer"/>

    <bean id="ipsnListReadWriteExecutor"
          class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="2"/>
        <property name="maxPoolSize" value="3"/>
    </bean>
    <bean id="excelToCsvTasklet" class="com.newcore.orbps.service.business.ExcelToCsvTasklet"
          scope="step">
        <property name="resourceId" value="#{jobParameters['targetResource']}"/>
    </bean>

    <!-- 声明被保人读 -->
    <bean id="ipsnItemReader" class="com.newcore.orbps.service.business.IpsnItemFileReader"
          scope="step">
        <property name="resourceId" value="#{jobParameters['targetResource']}"/>
        <property name="encoding" value="UTF-8"/>
        <property name="linesToSkip" value="0"/>
        <!-- <property name="recordSeparatorPolicy" ref="ipsnRecordSeparatorPolicy"
            /> -->
        <property name="lineMapper" ref="ipsnLineMapper"/>
        <property name="bufferedReaderFactory" ref="fileStoreReaderFactory"/>
    </bean>
    <bean id="ipsnRecordSeparatorPolicy"
          class="org.springframework.batch.item.file.separator.DefaultRecordSeparatorPolicy">
    </bean>
    <bean id="ipsnLineMapper"
          class="org.springframework.batch.item.file.mapping.DefaultLineMapper" scope="step">
        <property name="LineTokenizer" ref="delimitedLineTokenizer"/>
        <property name="FieldSetMapper" ref="ipsnItemFieldSetMapper"/>
    </bean>
    <!-- 记录映射 -->
    <bean id="delimitedLineTokenizer"
          class="com.newcore.orbps.service.business.IpsnListDelimitedLineTokenizer" scope="step"/>

    <!-- 解析记录 -->
    <bean id="ipsnItemFieldSetMapper"
          class="com.newcore.orbps.service.business.IpsnItemFieldSetMapper"
          scope="step">
        <property name="applNo" value="#{jobParameters['applNo']}"/>
        <property name="mongoBaseDao" ref="mongoBaseDao"/>
    </bean>
    <bean id="fileStoreReaderFactory" class="com.newcore.orbps.service.impl.FileStoreReaderFactory" scope="step"/>

    <!-- 声明被保人处理 -->
    <bean id="ipsnItemProcessor" class="com.newcore.orbps.service.business.IpsnItemProcessor"
          scope="step">
        <property name="mapName" value="#{jobParameters['mapName']}"/>
    </bean>

    <!--定义多个写者 -->
    <bean id="ipsnMultiItemWriter" class="com.newcore.orbps.service.business.IpsnMultiItemWriter" scope="step">
        <property name="delegates">
            <list>
                <ref bean="ipsnMongoItemWriter"/>
                <ref bean="errorIpsnMongoItemWriter"/>
            </list>
        </property>
    </bean>

    <!--新建mongwriter,正常被保人写入 -->
    <bean id="ipsnMongoItemWriter" class="com.newcore.orbps.service.business.IpsnMongoItemWriter" scope="step">
        <property name="template" ref="mongoTemplate"/>
        <property name="collection" value="grpInsured"/>
    </bean>

    <!--新建mongwriter,问题被保人写入 -->
    <bean id="errorIpsnMongoItemWriter" class="com.newcore.orbps.service.business.IpsnMongoItemWriter" scope="step">
        <property name="template" ref="mongoTemplate"/>
        <property name="collection" value="errorGrpInsured"/>
    </bean>

    <!-- 校验保额保费 -->
    <bean id="faceAmntAndPremiumCheckTasket"
          class="com.newcore.orbps.service.business.FaceAmntAndPremiumCheckTasket"
          scope="step">
        <property name="applNo" value="#{jobParameters['applNo']}"/>
    </bean>

    <!-- 清单错误信息文件生成 -->
    <bean id="errorGrpInsuredPrintTasket"
          class="com.newcore.orbps.service.business.ErrorGrpInsuredPrintTasket"
          scope="step">
        <property name="applNo" value="#{jobParameters['applNo']}"/>
    </bean>

    <bean id="ipsnListImportListener" class="com.newcore.orbps.service.impl.IpsnListImportListener" scope="job"/>

    <!-- 多线程 -->
    <bean id="openCustExecuter"
          class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="10"/>
        <property name="queueCapacity" value="500"/>
        <property name="keepAliveSeconds" value="400"/>
        <property name="maxPoolSize" value="200"/>
        <property name="allowCoreThreadTimeOut" value="true"/>
    </bean>

    <!--被保人开户批作业 begin -->
    <batch:job id="ipsnListOpenCustJob" job-repository="jobRepository"
               incrementer="runIdIncrementer" restartable="true">
        <batch:step id="ipsnListOpenCustReadWrite">
            <batch:tasklet task-executor="openCustExecuter">
                <batch:chunk reader="ipsnItemMongoReader" processor="ipsnItemOpenCustProcessor"
                             writer="ipsnItemsOpenCustWriter" commit-interval="100" skip-policy="ipsnOpenCustExceptionSkipPolicy">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <batch:listeners>
            <batch:listener ref="ipsnOpenCustListener"/>
        </batch:listeners>
    </batch:job>

    <bean id="ipsnOpenCustExceptionSkipPolicy" class="com.newcore.orbps.service.business.IpsnOpenCustExceptionSkipPolicy">
        <constructor-arg name="exceptionClassToSkip" value="com.newcore.orbps.service.business.IpsnOpenCustCompleteException"/>
    </bean>
    <bean id="retryPolicy" class="org.springframework.retry.policy.NeverRetryPolicy" scope="step"/>

    <!-- 定义mongoreader -->
    <bean id="ipsnItemMongoReader" class="com.newcore.orbps.service.business.MongoIpsnItemOpenCustReader"
          scope="step">
        <property name="template" ref="mongoTemplate"/>
        <property name="query" value="{'applNo' : '#{jobParameters['applNo']}'}"/>
        <property name="sort">
            <map>
                <entry key="ipsnNo"
                       value="#{T(org.springframework.data.domain.Sort.Direction).ASC}"/>
            </map>
        </property>
        <property name="collection" value="grpInsured"/>
        <property name="targetType"
                  value="com.newcore.orbps.models.service.bo.grpinsured.GrpInsured"/>
        <property name="pageSize" value="1000"/>
    </bean>

    <!-- 声明被保人开户处理 -->
    <bean id="ipsnItemOpenCustProcessor"
          class="com.newcore.orbps.service.business.IpsnItemOpenCustProcessor" scope="step"/>

    <!-- 声明被保人写入开发接口处理 -->
    <bean id="ipsnItemsOpenCustWriter"
          class="com.newcore.orbps.service.business.IpsnItemsOpenCustWriter"
          scope="step">
        <property name="openCustNoCount" value="#{jobParameters['size']}"></property>
    </bean>

    <bean id="ipsnOpenCustListener" class="com.newcore.orbps.service.impl.IpsnOpenCustListener" scope="job"/>

    <!-- 客户号回写数据库 -->
    <!-- <bean id="custNoWriteTasket" class="com.newcore.orbps.service.business.CustNoWriteTasket"
        scope="step"> <property name="applNo" value="#{jobParameters['applNo']}"
        /> </bean> -->
    <!--被保人开户 end -->

    <!-- <bean id="custNoListHolder" class="com.newcore.orbps.service.business.CustNoListHolder"
        factory-method="GetInstance" /> -->

    <bean id="taskPrmyRowMapper" class="com.newcore.orbps.service.business.TaskPrmyRowMapper"/>

    <!-- 保单生效批作业-->
    <batch:job id="makeInsurJob" job-repository="jobRepository" restartable="true">
        <batch:step id="cntrNoCreation" next="psMiologCreation">
            <batch:tasklet ref="cntrNoCreationTasklet"/>
        </batch:step>
        <batch:step id="psMiologCreation" next="multiPayCreation">
            <batch:tasklet ref="psMiologCreationTasklet"/>
        </batch:step>
        <batch:step id="multiPayCreation" next="accDetailReaderWriter">
            <batch:tasklet ref="multiPayCreationTasklet"/>
        </batch:step>
        <batch:step id="accDetailReaderWriter" next="makeInsurFinish">
            <batch:tasklet>
                <batch:chunk reader="earnestPagingItemReader" processor="mioAccInfoLogProcessor" writer="mioAccInfoLogWriter" commit-interval="100"/>
            </batch:tasklet>
        </batch:step>
        <batch:step id="makeInsurFinish">
            <batch:tasklet ref="makeInsurFinishTasklet"/>
        </batch:step>
        <batch:listeners>
            <batch:listener ref="makeInsurListener"/>
        </batch:listeners>
    </batch:job>

    <bean id="mioAccInfoLogProcessor" class="com.newcore.orbps.service.business.MioAccInfoLogProcessor" scope="step"/>
    <bean id="mioAccInfoLogWriter" class="com.newcore.orbps.service.business.MioAccInfoLogWriter" scope="step"/>
    <bean id="makeInsurFinishTasklet" class="com.newcore.orbps.service.business.MakeInsurFinishTasklet" scope="step"/>

    <!--保单落地批作业-->
    <batch:job id="cntrDataLandingJob" job-repository="jobRepository" incrementer="runIdIncrementer" restartable="true">
        <batch:step id="cntrBasicDataLanding" next="commmonAgreeementLanding" >
            <batch:tasklet ref="cntrBasicDataLandingTasklet"/>
        </batch:step>
        <batch:step id="commmonAgreeementLanding" next="ipsnLandingNotice">
            <batch:tasklet ref="commmonAgreeementLandingTasklet"/>
        </batch:step>
        <batch:step id="ipsnLandingNotice" next="mioLogLanding" allow-start-if-complete="true">
            <batch:tasklet ref="ipsnLandingNoticeTasklet"/>
        </batch:step>
        <batch:step id="mioLogLanding">
            <batch:tasklet ref="mioLogLandingTasklet"/>
        </batch:step>
        <batch:listeners>
            <batch:listener ref="cntrDataLandingJobListener"/>
        </batch:listeners>
    </batch:job>

    <bean id="cntrNoCreationTasklet" class="com.newcore.orbps.service.business.CntrNoCreationTasklet" scope="step"/>
    <bean id="psMiologCreationTasklet" class="com.newcore.orbps.service.business.PsMiologCreationTasklet" scope="step"/>
    <bean id="multiPayCreationTasklet" class="com.newcore.orbps.service.business.MultiPayCreationTasklet" scope="step"/>
    <bean id="makeInsurListener" class="com.newcore.orbps.service.impl.MakeInsurListener" scope="job"/>

    <bean id="cntrBasicDataLandingTasklet" class="com.newcore.orbps.service.business.CntrBasicDataLandingTasklet" scope="step">
        <property name="maxAttempts" value="3"/>
    </bean>
    <bean id="commmonAgreeementLandingTasklet"
          class="com.newcore.orbps.service.business.CommmonAgreeementLandingTasklet" scope="step">
        <property name="maxAttempts" value="3"/>
    </bean>
    <bean id="ipsnLandingNoticeTasklet" class="com.newcore.orbps.service.business.IpsnLandingNoticeTasklet" scope="step">
        <property name="maxAttempts" value="3"/>
    </bean>

    <bean id="mioLogLandingTasklet" class="com.newcore.orbps.service.business.MioLogLandingTasklet" scope="step">
        <property name="maxAttempts" value="3"/>
    </bean>
    <bean id="cntrDataLandingJobListener" class="com.newcore.orbps.service.impl.CntrDataLandingJobListener" scope="job"/>

    <batch:job id="procEarnestPayPlnmioRecInfoJob" job-repository="jobRepository" restartable="true">
        <batch:step id="earnestPayPlnmioRecReadWrite">
            <batch:tasklet>
                <batch:chunk reader="earnestPagingItemReader" processor="earnestAccItemProcessor" writer="payPlnmioRecInfoWriter"  commit-interval="100"/>
            </batch:tasklet>
        </batch:step>
        <batch:listeners>
            <batch:listener ref="procEarnestPayPlnmioRecInfoJobListener"/>
        </batch:listeners>
    </batch:job>

    <bean id="earnestPagingItemReader" class="org.springframework.batch.item.database.JdbcPagingItemReader" scope="step">
        <property name="dataSource" ref="defaultDataSource"/>
        <property name="queryProvider">
            <bean class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
                <property name="dataSource" ref="defaultDataSource"/>
                <property name="selectClause" value="SELECT ACC_ID, ACC_NO, ACC_TYPE, ACC_PERSON_NO, BALANCE, FROZEN_BALANCE"/>
                <property name="fromClause" value="FROM EARNEST_ACC_INFO"/>
                <property name="whereClause" value="#{jobParameters['query.where']}"/>
                <property name="sortKey" value= "ACC_ID"/>
            </bean>
        </property>
        <property name="pageSize" value="100"/>
        <property name="rowMapper">
            <bean class="com.newcore.orbps.models.finance.EarnestAccInfoRowMapper"/>
        </property>
    </bean>
    <bean id="earnestAccItemProcessor" class="com.newcore.orbps.service.business.EarnestAccItemProcessor" scope="step"/>
    <bean id="payPlnmioRecInfoWriter" class="com.newcore.orbps.service.business.PayPlnmioRecInfoItemWriter" scope="step"/>
    <bean id="procEarnestPayPlnmioRecInfoJobListener" class="com.newcore.orbps.service.impl.ProcEarnestPayPlnmioRecInfoJobListener" scope="job"/>

</beans>